/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-grafana-api/apis/playlist/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlaylistLister helps list Playlists.
// All objects returned here must be treated as read-only.
type PlaylistLister interface {
	// List lists all Playlists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Playlist, err error)
	// Playlists returns an object that can list and get Playlists.
	Playlists(namespace string) PlaylistNamespaceLister
	PlaylistListerExpansion
}

// playlistLister implements the PlaylistLister interface.
type playlistLister struct {
	indexer cache.Indexer
}

// NewPlaylistLister returns a new PlaylistLister.
func NewPlaylistLister(indexer cache.Indexer) PlaylistLister {
	return &playlistLister{indexer: indexer}
}

// List lists all Playlists in the indexer.
func (s *playlistLister) List(selector labels.Selector) (ret []*v1alpha1.Playlist, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Playlist))
	})
	return ret, err
}

// Playlists returns an object that can list and get Playlists.
func (s *playlistLister) Playlists(namespace string) PlaylistNamespaceLister {
	return playlistNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlaylistNamespaceLister helps list and get Playlists.
// All objects returned here must be treated as read-only.
type PlaylistNamespaceLister interface {
	// List lists all Playlists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Playlist, err error)
	// Get retrieves the Playlist from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Playlist, error)
	PlaylistNamespaceListerExpansion
}

// playlistNamespaceLister implements the PlaylistNamespaceLister
// interface.
type playlistNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Playlists in the indexer for a given namespace.
func (s playlistNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Playlist, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Playlist))
	})
	return ret, err
}

// Get retrieves the Playlist from the indexer for a given namespace and name.
func (s playlistNamespaceLister) Get(name string) (*v1alpha1.Playlist, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("playlist"), name)
	}
	return obj.(*v1alpha1.Playlist), nil
}
