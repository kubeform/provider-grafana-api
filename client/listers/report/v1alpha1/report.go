/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-grafana-api/apis/report/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReportLister helps list Reports.
// All objects returned here must be treated as read-only.
type ReportLister interface {
	// List lists all Reports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Report, err error)
	// Reports returns an object that can list and get Reports.
	Reports(namespace string) ReportNamespaceLister
	ReportListerExpansion
}

// reportLister implements the ReportLister interface.
type reportLister struct {
	indexer cache.Indexer
}

// NewReportLister returns a new ReportLister.
func NewReportLister(indexer cache.Indexer) ReportLister {
	return &reportLister{indexer: indexer}
}

// List lists all Reports in the indexer.
func (s *reportLister) List(selector labels.Selector) (ret []*v1alpha1.Report, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Report))
	})
	return ret, err
}

// Reports returns an object that can list and get Reports.
func (s *reportLister) Reports(namespace string) ReportNamespaceLister {
	return reportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReportNamespaceLister helps list and get Reports.
// All objects returned here must be treated as read-only.
type ReportNamespaceLister interface {
	// List lists all Reports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Report, err error)
	// Get retrieves the Report from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Report, error)
	ReportNamespaceListerExpansion
}

// reportNamespaceLister implements the ReportNamespaceLister
// interface.
type reportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Reports in the indexer for a given namespace.
func (s reportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Report, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Report))
	})
	return ret, err
}

// Get retrieves the Report from the indexer for a given namespace and name.
func (s reportNamespaceLister) Get(name string) (*v1alpha1.Report, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("report"), name)
	}
	return obj.(*v1alpha1.Report), nil
}
