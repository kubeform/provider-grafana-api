/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-grafana-api/apis/team/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PreferencesLister helps list Preferenceses.
// All objects returned here must be treated as read-only.
type PreferencesLister interface {
	// List lists all Preferenceses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Preferences, err error)
	// Preferenceses returns an object that can list and get Preferenceses.
	Preferenceses(namespace string) PreferencesNamespaceLister
	PreferencesListerExpansion
}

// preferencesLister implements the PreferencesLister interface.
type preferencesLister struct {
	indexer cache.Indexer
}

// NewPreferencesLister returns a new PreferencesLister.
func NewPreferencesLister(indexer cache.Indexer) PreferencesLister {
	return &preferencesLister{indexer: indexer}
}

// List lists all Preferenceses in the indexer.
func (s *preferencesLister) List(selector labels.Selector) (ret []*v1alpha1.Preferences, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Preferences))
	})
	return ret, err
}

// Preferenceses returns an object that can list and get Preferenceses.
func (s *preferencesLister) Preferenceses(namespace string) PreferencesNamespaceLister {
	return preferencesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PreferencesNamespaceLister helps list and get Preferenceses.
// All objects returned here must be treated as read-only.
type PreferencesNamespaceLister interface {
	// List lists all Preferenceses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Preferences, err error)
	// Get retrieves the Preferences from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Preferences, error)
	PreferencesNamespaceListerExpansion
}

// preferencesNamespaceLister implements the PreferencesNamespaceLister
// interface.
type preferencesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Preferenceses in the indexer for a given namespace.
func (s preferencesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Preferences, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Preferences))
	})
	return ret, err
}

// Get retrieves the Preferences from the indexer for a given namespace and name.
func (s preferencesNamespaceLister) Get(name string) (*v1alpha1.Preferences, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("preferences"), name)
	}
	return obj.(*v1alpha1.Preferences), nil
}
