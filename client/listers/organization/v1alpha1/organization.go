/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-grafana-api/apis/organization/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrganizationLister helps list Organizations.
// All objects returned here must be treated as read-only.
type OrganizationLister interface {
	// List lists all Organizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Organization, err error)
	// Organizations returns an object that can list and get Organizations.
	Organizations(namespace string) OrganizationNamespaceLister
	OrganizationListerExpansion
}

// organizationLister implements the OrganizationLister interface.
type organizationLister struct {
	indexer cache.Indexer
}

// NewOrganizationLister returns a new OrganizationLister.
func NewOrganizationLister(indexer cache.Indexer) OrganizationLister {
	return &organizationLister{indexer: indexer}
}

// List lists all Organizations in the indexer.
func (s *organizationLister) List(selector labels.Selector) (ret []*v1alpha1.Organization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Organization))
	})
	return ret, err
}

// Organizations returns an object that can list and get Organizations.
func (s *organizationLister) Organizations(namespace string) OrganizationNamespaceLister {
	return organizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrganizationNamespaceLister helps list and get Organizations.
// All objects returned here must be treated as read-only.
type OrganizationNamespaceLister interface {
	// List lists all Organizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Organization, err error)
	// Get retrieves the Organization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Organization, error)
	OrganizationNamespaceListerExpansion
}

// organizationNamespaceLister implements the OrganizationNamespaceLister
// interface.
type organizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Organizations in the indexer for a given namespace.
func (s organizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Organization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Organization))
	})
	return ret, err
}

// Get retrieves the Organization from the indexer for a given namespace and name.
func (s organizationNamespaceLister) Get(name string) (*v1alpha1.Organization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("organization"), name)
	}
	return obj.(*v1alpha1.Organization), nil
}
