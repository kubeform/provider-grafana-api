/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-grafana-api/apis/library/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PanelLister helps list Panels.
// All objects returned here must be treated as read-only.
type PanelLister interface {
	// List lists all Panels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Panel, err error)
	// Panels returns an object that can list and get Panels.
	Panels(namespace string) PanelNamespaceLister
	PanelListerExpansion
}

// panelLister implements the PanelLister interface.
type panelLister struct {
	indexer cache.Indexer
}

// NewPanelLister returns a new PanelLister.
func NewPanelLister(indexer cache.Indexer) PanelLister {
	return &panelLister{indexer: indexer}
}

// List lists all Panels in the indexer.
func (s *panelLister) List(selector labels.Selector) (ret []*v1alpha1.Panel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Panel))
	})
	return ret, err
}

// Panels returns an object that can list and get Panels.
func (s *panelLister) Panels(namespace string) PanelNamespaceLister {
	return panelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PanelNamespaceLister helps list and get Panels.
// All objects returned here must be treated as read-only.
type PanelNamespaceLister interface {
	// List lists all Panels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Panel, err error)
	// Get retrieves the Panel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Panel, error)
	PanelNamespaceListerExpansion
}

// panelNamespaceLister implements the PanelNamespaceLister
// interface.
type panelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Panels in the indexer for a given namespace.
func (s panelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Panel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Panel))
	})
	return ret, err
}

// Get retrieves the Panel from the indexer for a given namespace and name.
func (s panelNamespaceLister) Get(name string) (*v1alpha1.Panel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("panel"), name)
	}
	return obj.(*v1alpha1.Panel), nil
}
