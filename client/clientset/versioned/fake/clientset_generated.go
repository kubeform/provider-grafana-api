/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "kubeform.dev/provider-grafana-api/client/clientset/versioned"
	alertv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/alert/v1alpha1"
	fakealertv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/alert/v1alpha1/fake"
	apikeyv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/apikey/v1alpha1"
	fakeapikeyv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/apikey/v1alpha1/fake"
	builtinv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/builtin/v1alpha1"
	fakebuiltinv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/builtin/v1alpha1/fake"
	cloudv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/cloud/v1alpha1"
	fakecloudv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/cloud/v1alpha1/fake"
	dashboardv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/dashboard/v1alpha1"
	fakedashboardv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/dashboard/v1alpha1/fake"
	datav1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/data/v1alpha1"
	fakedatav1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/data/v1alpha1/fake"
	folderv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/folder/v1alpha1"
	fakefolderv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/folder/v1alpha1/fake"
	libraryv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/library/v1alpha1"
	fakelibraryv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/library/v1alpha1/fake"
	machinev1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/machine/v1alpha1"
	fakemachinev1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/machine/v1alpha1/fake"
	organizationv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/organization/v1alpha1"
	fakeorganizationv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/organization/v1alpha1/fake"
	playlistv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/playlist/v1alpha1"
	fakeplaylistv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/playlist/v1alpha1/fake"
	reportv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/report/v1alpha1"
	fakereportv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/report/v1alpha1/fake"
	rolev1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/role/v1alpha1"
	fakerolev1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/role/v1alpha1/fake"
	syntheticv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/synthetic/v1alpha1"
	fakesyntheticv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/synthetic/v1alpha1/fake"
	teamv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/team/v1alpha1"
	faketeamv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/team/v1alpha1/fake"
	userv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/user/v1alpha1"
	fakeuserv1alpha1 "kubeform.dev/provider-grafana-api/client/clientset/versioned/typed/user/v1alpha1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// AlertV1alpha1 retrieves the AlertV1alpha1Client
func (c *Clientset) AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface {
	return &fakealertv1alpha1.FakeAlertV1alpha1{Fake: &c.Fake}
}

// ApikeyV1alpha1 retrieves the ApikeyV1alpha1Client
func (c *Clientset) ApikeyV1alpha1() apikeyv1alpha1.ApikeyV1alpha1Interface {
	return &fakeapikeyv1alpha1.FakeApikeyV1alpha1{Fake: &c.Fake}
}

// BuiltinV1alpha1 retrieves the BuiltinV1alpha1Client
func (c *Clientset) BuiltinV1alpha1() builtinv1alpha1.BuiltinV1alpha1Interface {
	return &fakebuiltinv1alpha1.FakeBuiltinV1alpha1{Fake: &c.Fake}
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return &fakecloudv1alpha1.FakeCloudV1alpha1{Fake: &c.Fake}
}

// DashboardV1alpha1 retrieves the DashboardV1alpha1Client
func (c *Clientset) DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface {
	return &fakedashboardv1alpha1.FakeDashboardV1alpha1{Fake: &c.Fake}
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return &fakedatav1alpha1.FakeDataV1alpha1{Fake: &c.Fake}
}

// FolderV1alpha1 retrieves the FolderV1alpha1Client
func (c *Clientset) FolderV1alpha1() folderv1alpha1.FolderV1alpha1Interface {
	return &fakefolderv1alpha1.FakeFolderV1alpha1{Fake: &c.Fake}
}

// LibraryV1alpha1 retrieves the LibraryV1alpha1Client
func (c *Clientset) LibraryV1alpha1() libraryv1alpha1.LibraryV1alpha1Interface {
	return &fakelibraryv1alpha1.FakeLibraryV1alpha1{Fake: &c.Fake}
}

// MachineV1alpha1 retrieves the MachineV1alpha1Client
func (c *Clientset) MachineV1alpha1() machinev1alpha1.MachineV1alpha1Interface {
	return &fakemachinev1alpha1.FakeMachineV1alpha1{Fake: &c.Fake}
}

// OrganizationV1alpha1 retrieves the OrganizationV1alpha1Client
func (c *Clientset) OrganizationV1alpha1() organizationv1alpha1.OrganizationV1alpha1Interface {
	return &fakeorganizationv1alpha1.FakeOrganizationV1alpha1{Fake: &c.Fake}
}

// PlaylistV1alpha1 retrieves the PlaylistV1alpha1Client
func (c *Clientset) PlaylistV1alpha1() playlistv1alpha1.PlaylistV1alpha1Interface {
	return &fakeplaylistv1alpha1.FakePlaylistV1alpha1{Fake: &c.Fake}
}

// ReportV1alpha1 retrieves the ReportV1alpha1Client
func (c *Clientset) ReportV1alpha1() reportv1alpha1.ReportV1alpha1Interface {
	return &fakereportv1alpha1.FakeReportV1alpha1{Fake: &c.Fake}
}

// RoleV1alpha1 retrieves the RoleV1alpha1Client
func (c *Clientset) RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface {
	return &fakerolev1alpha1.FakeRoleV1alpha1{Fake: &c.Fake}
}

// SyntheticV1alpha1 retrieves the SyntheticV1alpha1Client
func (c *Clientset) SyntheticV1alpha1() syntheticv1alpha1.SyntheticV1alpha1Interface {
	return &fakesyntheticv1alpha1.FakeSyntheticV1alpha1{Fake: &c.Fake}
}

// TeamV1alpha1 retrieves the TeamV1alpha1Client
func (c *Clientset) TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface {
	return &faketeamv1alpha1.FakeTeamV1alpha1{Fake: &c.Fake}
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return &fakeuserv1alpha1.FakeUserV1alpha1{Fake: &c.Fake}
}
